// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

public class ParsingSource implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    text,
    workspacePath,
  }
  private static final Type[] typeValues = Type.values();

  public final Type type;
  public final Object value;
  private ParsingSource(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public ParsingSource(java.io.DataInputStream src) throws java.io.IOException {
    this(new codeprober.protocol.BinaryInputStream.DataInputStreamWrapper(src));
  }
  public ParsingSource(codeprober.protocol.BinaryInputStream src) throws java.io.IOException {
    this.type = typeValues[src.readInt()];
    switch (this.type) {
    case text:
        this.value = src.readUTF();
        break;
    case workspacePath:
    default:
        this.value = src.readUTF();
        break;
    }
  }
  public static ParsingSource fromText(String val) { return new ParsingSource(Type.text, val); }
  public static ParsingSource fromWorkspacePath(String val) { return new ParsingSource(Type.workspacePath, val); }

  public boolean isText() { return type == Type.text; }
  public String asText() { if (type != Type.text) { throw new IllegalStateException("This ParsingSource is not of type text, it is '" + type + "'"); } return (String)value; }
  public boolean isWorkspacePath() { return type == Type.workspacePath; }
  public String asWorkspacePath() { if (type != Type.workspacePath) { throw new IllegalStateException("This ParsingSource is not of type workspacePath, it is '" + type + "'"); } return (String)value; }

  public static ParsingSource fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case text:
      try {
        final String val = obj.getString("value");
        return fromText(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid ParsingSource", e);
      }
    case workspacePath:
    default:
      try {
        final String val = obj.getString("value");
        return fromWorkspacePath(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid ParsingSource", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case text:
      ret.put("value", ((String)value));
      break;
    case workspacePath:
    default:
      ret.put("value", ((String)value));
      break;
    }
    return ret;
  }
  public void writeTo(java.io.DataOutputStream dst) throws java.io.IOException {
    writeTo(new codeprober.protocol.BinaryOutputStream.DataOutputStreamWrapper(dst));
  }
  public void writeTo(codeprober.protocol.BinaryOutputStream dst) throws java.io.IOException {
    dst.writeInt(type.ordinal());
    switch (type) {
    case text:
      dst.writeUTF(((String)value));
      break;
    case workspacePath:
    default:
      dst.writeUTF(((String)value));
      break;
    }
  }
}
