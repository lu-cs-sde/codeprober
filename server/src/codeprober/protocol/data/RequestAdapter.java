// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONException;
import org.json.JSONObject;

public abstract class RequestAdapter {

  public JSONObject handle(JSONObject request) {
    switch (request.getString("type")) {
      case "rpc": {
        return handleTopRequest(TopRequestReq.fromJSON(request)).toJSON();
      }
      case "ListNodes": {
        return handleListNodes(ListNodesReq.fromJSON(request)).toJSON();
      }
      case "ListProperties": {
        return handleListProperties(ListPropertiesReq.fromJSON(request)).toJSON();
      }
      case "EvaluateProperty": {
        return handleEvaluateProperty(EvaluatePropertyReq.fromJSON(request)).toJSON();
      }
      case "ListTreeUpwards": {
        return handleListTree(ListTreeReq.fromJSON(request)).toJSON();
      }
      case "ListTreeDownwards": {
        return handleListTree(ListTreeReq.fromJSON(request)).toJSON();
      }
      case "Test:ListTestSuites": {
        return handleListTestSuites(ListTestSuitesReq.fromJSON(request)).toJSON();
      }
      case "Test:GetTestSuite": {
        return handleGetTestSuite(GetTestSuiteReq.fromJSON(request)).toJSON();
      }
      case "Test:PutTestSuite": {
        return handlePutTestSuite(PutTestSuiteReq.fromJSON(request)).toJSON();
      }
      case "Concurrent:SubscribeToWorkerStatus": {
        return handleSubscribeToWorkerStatus(SubscribeToWorkerStatusReq.fromJSON(request)).toJSON();
      }
      case "Concurrent:UnsubscribeFromWorkerStatus": {
        return handleUnsubscribeFromWorkerStatus(UnsubscribeFromWorkerStatusReq.fromJSON(request)).toJSON();
      }
      case "Concurrent:StopJob": {
        return handleStopJob(StopJobReq.fromJSON(request)).toJSON();
      }
      case "Concurrent:PollWorkerStatus": {
        return handlePollWorkerStatus(PollWorkerStatusReq.fromJSON(request)).toJSON();
      }
      case "GetWorkspaceFile": {
        return handleGetWorkspaceFile(GetWorkspaceFileReq.fromJSON(request)).toJSON();
      }
      case "ListWorkspaceDirectory": {
        return handleListWorkspaceDirectory(ListWorkspaceDirectoryReq.fromJSON(request)).toJSON();
      }
      case "PutWorkspaceContent": {
        return handlePutWorkspaceContent(PutWorkspaceContentReq.fromJSON(request)).toJSON();
      }
      case "PutWorkspaceMetadata": {
        return handlePutWorkspaceMetadata(PutWorkspaceMetadataReq.fromJSON(request)).toJSON();
      }
      case "RenameWorkspacePath": {
        return handleRenameWorkspacePath(RenameWorkspacePathReq.fromJSON(request)).toJSON();
      }
      case "UnlinkWorkspacePath": {
        return handleUnlinkWorkspacePath(UnlinkWorkspacePathReq.fromJSON(request)).toJSON();
      }
      case "ide:hover": {
        return handleHover(HoverReq.fromJSON(request)).toJSON();
      }
      case "ide:complete": {
        return handleComplete(CompleteReq.fromJSON(request)).toJSON();
      }
      case "wsput:init": {
        return handleWsPutInit(WsPutInitReq.fromJSON(request)).toJSON();
      }
      case "wsput:longpoll": {
        return handleWsPutLongpoll(WsPutLongpollReq.fromJSON(request)).toJSON();
      }
      case "wsput:tunnel": {
        return handleTunneledWsPutRequest(TunneledWsPutRequestReq.fromJSON(request)).toJSON();
      }
      case "Concurrent:GetWorkerStatus": {
        return handleGetWorkerStatus(GetWorkerStatusReq.fromJSON(request)).toJSON();
      }
      case "Concurrent:SubmitTask": {
        return handleSubmitWorkerTask(SubmitWorkerTaskReq.fromJSON(request)).toJSON();
      }
      default: return null;
    }
  }

  protected TopRequestRes handleTopRequest(TopRequestReq req) {
    throw new JSONException("Request TopRequest is not implemented");
  }

  protected ListNodesRes handleListNodes(ListNodesReq req) {
    throw new JSONException("Request ListNodes is not implemented");
  }

  protected ListPropertiesRes handleListProperties(ListPropertiesReq req) {
    throw new JSONException("Request ListProperties is not implemented");
  }

  protected EvaluatePropertyRes handleEvaluateProperty(EvaluatePropertyReq req) {
    throw new JSONException("Request EvaluateProperty is not implemented");
  }

  protected ListTreeRes handleListTree(ListTreeReq req) {
    throw new JSONException("Request ListTree is not implemented");
  }

  protected ListTestSuitesRes handleListTestSuites(ListTestSuitesReq req) {
    throw new JSONException("Request ListTestSuites is not implemented");
  }

  protected GetTestSuiteRes handleGetTestSuite(GetTestSuiteReq req) {
    throw new JSONException("Request GetTestSuite is not implemented");
  }

  protected PutTestSuiteRes handlePutTestSuite(PutTestSuiteReq req) {
    throw new JSONException("Request PutTestSuite is not implemented");
  }

  protected SubscribeToWorkerStatusRes handleSubscribeToWorkerStatus(SubscribeToWorkerStatusReq req) {
    throw new JSONException("Request SubscribeToWorkerStatus is not implemented");
  }

  protected UnsubscribeFromWorkerStatusRes handleUnsubscribeFromWorkerStatus(UnsubscribeFromWorkerStatusReq req) {
    throw new JSONException("Request UnsubscribeFromWorkerStatus is not implemented");
  }

  protected StopJobRes handleStopJob(StopJobReq req) {
    throw new JSONException("Request StopJob is not implemented");
  }

  protected PollWorkerStatusRes handlePollWorkerStatus(PollWorkerStatusReq req) {
    throw new JSONException("Request PollWorkerStatus is not implemented");
  }

  protected GetWorkspaceFileRes handleGetWorkspaceFile(GetWorkspaceFileReq req) {
    throw new JSONException("Request GetWorkspaceFile is not implemented");
  }

  protected ListWorkspaceDirectoryRes handleListWorkspaceDirectory(ListWorkspaceDirectoryReq req) {
    throw new JSONException("Request ListWorkspaceDirectory is not implemented");
  }

  protected PutWorkspaceContentRes handlePutWorkspaceContent(PutWorkspaceContentReq req) {
    throw new JSONException("Request PutWorkspaceContent is not implemented");
  }

  protected PutWorkspaceMetadataRes handlePutWorkspaceMetadata(PutWorkspaceMetadataReq req) {
    throw new JSONException("Request PutWorkspaceMetadata is not implemented");
  }

  protected RenameWorkspacePathRes handleRenameWorkspacePath(RenameWorkspacePathReq req) {
    throw new JSONException("Request RenameWorkspacePath is not implemented");
  }

  protected UnlinkWorkspacePathRes handleUnlinkWorkspacePath(UnlinkWorkspacePathReq req) {
    throw new JSONException("Request UnlinkWorkspacePath is not implemented");
  }

  protected HoverRes handleHover(HoverReq req) {
    throw new JSONException("Request Hover is not implemented");
  }

  protected CompleteRes handleComplete(CompleteReq req) {
    throw new JSONException("Request Complete is not implemented");
  }

  protected WsPutInitRes handleWsPutInit(WsPutInitReq req) {
    throw new JSONException("Request WsPutInit is not implemented");
  }

  protected WsPutLongpollRes handleWsPutLongpoll(WsPutLongpollReq req) {
    throw new JSONException("Request WsPutLongpoll is not implemented");
  }

  protected TunneledWsPutRequestRes handleTunneledWsPutRequest(TunneledWsPutRequestReq req) {
    throw new JSONException("Request TunneledWsPutRequest is not implemented");
  }

  protected GetWorkerStatusRes handleGetWorkerStatus(GetWorkerStatusReq req) {
    throw new JSONException("Request GetWorkerStatus is not implemented");
  }

  protected SubmitWorkerTaskRes handleSubmitWorkerTask(SubmitWorkerTaskReq req) {
    throw new JSONException("Request SubmitWorkerTask is not implemented");
  }
}
