// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

public class PropertyEvaluationResult implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    job,
    sync,
  }
  private static final Type[] typeValues = Type.values();

  public final Type type;
  public final Object value;
  private PropertyEvaluationResult(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public PropertyEvaluationResult(java.io.DataInputStream src) throws java.io.IOException {
    this(new codeprober.protocol.BinaryInputStream.DataInputStreamWrapper(src));
  }
  public PropertyEvaluationResult(codeprober.protocol.BinaryInputStream src) throws java.io.IOException {
    this.type = typeValues[src.readInt()];
    switch (this.type) {
    case job:
        this.value = src.readLong();
        break;
    case sync:
    default:
        this.value = new SynchronousEvaluationResult(src);
        break;
    }
  }
  public static PropertyEvaluationResult fromJob(long val) { return new PropertyEvaluationResult(Type.job, val); }
  public static PropertyEvaluationResult fromSync(SynchronousEvaluationResult val) { return new PropertyEvaluationResult(Type.sync, val); }

  public boolean isJob() { return type == Type.job; }
  public long asJob() { if (type != Type.job) { throw new IllegalStateException("This PropertyEvaluationResult is not of type job, it is '" + type + "'"); } return (long)value; }
  public boolean isSync() { return type == Type.sync; }
  public SynchronousEvaluationResult asSync() { if (type != Type.sync) { throw new IllegalStateException("This PropertyEvaluationResult is not of type sync, it is '" + type + "'"); } return (SynchronousEvaluationResult)value; }

  public static PropertyEvaluationResult fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case job:
      try {
        final long val = obj.getLong("value");
        return fromJob(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid PropertyEvaluationResult", e);
      }
    case sync:
    default:
      try {
        final SynchronousEvaluationResult val = SynchronousEvaluationResult.fromJSON(obj.getJSONObject("value"));
        return fromSync(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid PropertyEvaluationResult", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case job:
      ret.put("value", ((long)value));
      break;
    case sync:
    default:
      ret.put("value", ((SynchronousEvaluationResult)value).toJSON());
      break;
    }
    return ret;
  }
  public void writeTo(java.io.DataOutputStream dst) throws java.io.IOException {
    writeTo(new codeprober.protocol.BinaryOutputStream.DataOutputStreamWrapper(dst));
  }
  public void writeTo(codeprober.protocol.BinaryOutputStream dst) throws java.io.IOException {
    dst.writeInt(type.ordinal());
    switch (type) {
    case job:
      dst.writeLong(((long)value));
      break;
    case sync:
    default:
      ((SynchronousEvaluationResult)value).writeTo(dst);
      break;
    }
  }
}
