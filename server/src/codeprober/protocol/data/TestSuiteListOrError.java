// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

@SuppressWarnings("unchecked")
public class TestSuiteListOrError implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    err,
    suites,
  }
  private static final Type[] typeValues = Type.values();

  public final Type type;
  public final Object value;
  private TestSuiteListOrError(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public TestSuiteListOrError(java.io.DataInputStream src) throws java.io.IOException {
    this(new codeprober.protocol.BinaryInputStream.DataInputStreamWrapper(src));
  }
  public TestSuiteListOrError(codeprober.protocol.BinaryInputStream src) throws java.io.IOException {
    this.type = typeValues[src.readInt()];
    switch (this.type) {
    case err:
        this.value = codeprober.protocol.ListTestSuitesErrorCode.values()[src.readInt()];
        break;
    case suites:
    default:
        this.value = codeprober.util.JsonUtil.<String>readDataArr(src, () -> src.readUTF());
        break;
    }
  }
  public static TestSuiteListOrError fromErr(codeprober.protocol.ListTestSuitesErrorCode val) { return new TestSuiteListOrError(Type.err, val); }
  public static TestSuiteListOrError fromSuites(java.util.List<String> val) { return new TestSuiteListOrError(Type.suites, val); }

  public boolean isErr() { return type == Type.err; }
  public codeprober.protocol.ListTestSuitesErrorCode asErr() { if (type != Type.err) { throw new IllegalStateException("This TestSuiteListOrError is not of type err, it is '" + type + "'"); } return (codeprober.protocol.ListTestSuitesErrorCode)value; }
  public boolean isSuites() { return type == Type.suites; }
  public java.util.List<String> asSuites() { if (type != Type.suites) { throw new IllegalStateException("This TestSuiteListOrError is not of type suites, it is '" + type + "'"); } return (java.util.List<String>)value; }

  public static TestSuiteListOrError fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case err:
      try {
        final codeprober.protocol.ListTestSuitesErrorCode val = codeprober.protocol.ListTestSuitesErrorCode.parseFromJson(obj.getString("value"));
        return fromErr(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid TestSuiteListOrError", e);
      }
    case suites:
    default:
      try {
        final java.util.List<String> val = codeprober.util.JsonUtil.<String>mapArr(obj.getJSONArray("value"), (arr, idx) -> arr.getString(idx));
        return fromSuites(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid TestSuiteListOrError", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case err:
      ret.put("value", ((codeprober.protocol.ListTestSuitesErrorCode)value).name());
      break;
    case suites:
    default:
      ret.put("value", new org.json.JSONArray(((java.util.List<String>)value)));
      break;
    }
    return ret;
  }
  public void writeTo(java.io.DataOutputStream dst) throws java.io.IOException {
    writeTo(new codeprober.protocol.BinaryOutputStream.DataOutputStreamWrapper(dst));
  }
  public void writeTo(codeprober.protocol.BinaryOutputStream dst) throws java.io.IOException {
    dst.writeInt(type.ordinal());
    switch (type) {
    case err:
      dst.writeInt(((codeprober.protocol.ListTestSuitesErrorCode)value).ordinal());
      break;
    case suites:
    default:
      codeprober.util.JsonUtil.<String>writeDataArr(dst, ((java.util.List<String>)value), ent -> dst.writeUTF(ent));
      break;
    }
  }
}
