// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

public class TopRequestResponseData implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    success,
    failureMsg,
  }
  private static final Type[] typeValues = Type.values();

  public final Type type;
  public final Object value;
  private TopRequestResponseData(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public TopRequestResponseData(java.io.DataInputStream src) throws java.io.IOException {
    this(new codeprober.protocol.BinaryInputStream.DataInputStreamWrapper(src));
  }
  public TopRequestResponseData(codeprober.protocol.BinaryInputStream src) throws java.io.IOException {
    this.type = typeValues[src.readInt()];
    switch (this.type) {
    case success:
        this.value = new org.json.JSONObject(src.readUTF());
        break;
    case failureMsg:
    default:
        this.value = src.readUTF();
        break;
    }
  }
  public static TopRequestResponseData fromSuccess(org.json.JSONObject val) { return new TopRequestResponseData(Type.success, val); }
  public static TopRequestResponseData fromFailureMsg(String val) { return new TopRequestResponseData(Type.failureMsg, val); }

  public boolean isSuccess() { return type == Type.success; }
  public org.json.JSONObject asSuccess() { if (type != Type.success) { throw new IllegalStateException("This TopRequestResponseData is not of type success, it is '" + type + "'"); } return (org.json.JSONObject)value; }
  public boolean isFailureMsg() { return type == Type.failureMsg; }
  public String asFailureMsg() { if (type != Type.failureMsg) { throw new IllegalStateException("This TopRequestResponseData is not of type failureMsg, it is '" + type + "'"); } return (String)value; }

  public static TopRequestResponseData fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case success:
      try {
        final org.json.JSONObject val = obj.getJSONObject("value");
        return fromSuccess(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid TopRequestResponseData", e);
      }
    case failureMsg:
    default:
      try {
        final String val = obj.getString("value");
        return fromFailureMsg(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid TopRequestResponseData", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case success:
      ret.put("value", ((org.json.JSONObject)value));
      break;
    case failureMsg:
    default:
      ret.put("value", ((String)value));
      break;
    }
    return ret;
  }
  public void writeTo(java.io.DataOutputStream dst) throws java.io.IOException {
    writeTo(new codeprober.protocol.BinaryOutputStream.DataOutputStreamWrapper(dst));
  }
  public void writeTo(codeprober.protocol.BinaryOutputStream dst) throws java.io.IOException {
    dst.writeInt(type.ordinal());
    switch (type) {
    case success:
      dst.writeUTF(((org.json.JSONObject)value).toString());
      break;
    case failureMsg:
    default:
      dst.writeUTF(((String)value));
      break;
    }
  }
}
