// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

public class WorkspaceEntry implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    file,
    directory,
  }
  private static final Type[] typeValues = Type.values();

  public final Type type;
  public final Object value;
  private WorkspaceEntry(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public WorkspaceEntry(java.io.DataInputStream src) throws java.io.IOException {
    this(new codeprober.protocol.BinaryInputStream.DataInputStreamWrapper(src));
  }
  public WorkspaceEntry(codeprober.protocol.BinaryInputStream src) throws java.io.IOException {
    this.type = typeValues[src.readInt()];
    switch (this.type) {
    case file:
        this.value = src.readUTF();
        break;
    case directory:
    default:
        this.value = src.readUTF();
        break;
    }
  }
  public static WorkspaceEntry fromFile(String val) { return new WorkspaceEntry(Type.file, val); }
  public static WorkspaceEntry fromDirectory(String val) { return new WorkspaceEntry(Type.directory, val); }

  public boolean isFile() { return type == Type.file; }
  public String asFile() { if (type != Type.file) { throw new IllegalStateException("This WorkspaceEntry is not of type file, it is '" + type + "'"); } return (String)value; }
  public boolean isDirectory() { return type == Type.directory; }
  public String asDirectory() { if (type != Type.directory) { throw new IllegalStateException("This WorkspaceEntry is not of type directory, it is '" + type + "'"); } return (String)value; }

  public static WorkspaceEntry fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case file:
      try {
        final String val = obj.getString("value");
        return fromFile(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid WorkspaceEntry", e);
      }
    case directory:
    default:
      try {
        final String val = obj.getString("value");
        return fromDirectory(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid WorkspaceEntry", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case file:
      ret.put("value", ((String)value));
      break;
    case directory:
    default:
      ret.put("value", ((String)value));
      break;
    }
    return ret;
  }
  public void writeTo(java.io.DataOutputStream dst) throws java.io.IOException {
    writeTo(new codeprober.protocol.BinaryOutputStream.DataOutputStreamWrapper(dst));
  }
  public void writeTo(codeprober.protocol.BinaryOutputStream dst) throws java.io.IOException {
    dst.writeInt(type.ordinal());
    switch (type) {
    case file:
      dst.writeUTF(((String)value));
      break;
    case directory:
    default:
      dst.writeUTF(((String)value));
      break;
    }
  }
}
