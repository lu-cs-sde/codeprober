// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

public class TestSuiteOrError implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    err,
    contents,
  }
  private static final Type[] typeValues = Type.values();

  public final Type type;
  public final Object value;
  private TestSuiteOrError(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public TestSuiteOrError(java.io.DataInputStream src) throws java.io.IOException {
    this(new codeprober.protocol.BinaryInputStream.DataInputStreamWrapper(src));
  }
  public TestSuiteOrError(codeprober.protocol.BinaryInputStream src) throws java.io.IOException {
    this.type = typeValues[src.readInt()];
    switch (this.type) {
    case err:
        this.value = codeprober.protocol.GetTestSuiteContentsErrorCode.values()[src.readInt()];
        break;
    case contents:
    default:
        this.value = new TestSuite(src);
        break;
    }
  }
  public static TestSuiteOrError fromErr(codeprober.protocol.GetTestSuiteContentsErrorCode val) { return new TestSuiteOrError(Type.err, val); }
  public static TestSuiteOrError fromContents(TestSuite val) { return new TestSuiteOrError(Type.contents, val); }

  public boolean isErr() { return type == Type.err; }
  public codeprober.protocol.GetTestSuiteContentsErrorCode asErr() { if (type != Type.err) { throw new IllegalStateException("This TestSuiteOrError is not of type err, it is '" + type + "'"); } return (codeprober.protocol.GetTestSuiteContentsErrorCode)value; }
  public boolean isContents() { return type == Type.contents; }
  public TestSuite asContents() { if (type != Type.contents) { throw new IllegalStateException("This TestSuiteOrError is not of type contents, it is '" + type + "'"); } return (TestSuite)value; }

  public static TestSuiteOrError fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case err:
      try {
        final codeprober.protocol.GetTestSuiteContentsErrorCode val = codeprober.protocol.GetTestSuiteContentsErrorCode.parseFromJson(obj.getString("value"));
        return fromErr(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid TestSuiteOrError", e);
      }
    case contents:
    default:
      try {
        final TestSuite val = TestSuite.fromJSON(obj.getJSONObject("value"));
        return fromContents(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid TestSuiteOrError", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case err:
      ret.put("value", ((codeprober.protocol.GetTestSuiteContentsErrorCode)value).name());
      break;
    case contents:
    default:
      ret.put("value", ((TestSuite)value).toJSON());
      break;
    }
    return ret;
  }
  public void writeTo(java.io.DataOutputStream dst) throws java.io.IOException {
    writeTo(new codeprober.protocol.BinaryOutputStream.DataOutputStreamWrapper(dst));
  }
  public void writeTo(codeprober.protocol.BinaryOutputStream dst) throws java.io.IOException {
    dst.writeInt(type.ordinal());
    switch (type) {
    case err:
      dst.writeInt(((codeprober.protocol.GetTestSuiteContentsErrorCode)value).ordinal());
      break;
    case contents:
    default:
      ((TestSuite)value).writeTo(dst);
      break;
    }
  }
}
