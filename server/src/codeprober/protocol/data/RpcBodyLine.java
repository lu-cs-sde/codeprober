// Automatically generated by protocolgen.GenJava. DO NOT MODIFY
package codeprober.protocol.data;

import org.json.JSONObject;

@SuppressWarnings("unchecked")
public class RpcBodyLine implements codeprober.util.JsonUtil.ToJsonable {
  public static enum Type {
    plain,
    stdout,
    stderr,
    streamArg,
    arr,
    node,
    dotGraph,
    highlightMsg,
    tracing,
    html,
  }

  public final Type type;
  public final Object value;
  private RpcBodyLine(Type type, Object value) {
    this.type = type;
    this.value = value;
  }
  public static RpcBodyLine fromPlain(String val) { return new RpcBodyLine(Type.plain, val); }
  public static RpcBodyLine fromStdout(String val) { return new RpcBodyLine(Type.stdout, val); }
  public static RpcBodyLine fromStderr(String val) { return new RpcBodyLine(Type.stderr, val); }
  public static RpcBodyLine fromStreamArg(String val) { return new RpcBodyLine(Type.streamArg, val); }
  public static RpcBodyLine fromArr(java.util.List<RpcBodyLine> val) { return new RpcBodyLine(Type.arr, val); }
  public static RpcBodyLine fromNode(NodeLocator val) { return new RpcBodyLine(Type.node, val); }
  public static RpcBodyLine fromDotGraph(String val) { return new RpcBodyLine(Type.dotGraph, val); }
  public static RpcBodyLine fromHighlightMsg(HighlightableMessage val) { return new RpcBodyLine(Type.highlightMsg, val); }
  public static RpcBodyLine fromTracing(Tracing val) { return new RpcBodyLine(Type.tracing, val); }
  public static RpcBodyLine fromHtml(String val) { return new RpcBodyLine(Type.html, val); }

  public boolean isPlain() { return type == Type.plain; }
  public String asPlain() { if (type != Type.plain) { throw new IllegalStateException("This RpcBodyLine is not of type plain, it is '" + type + "'"); } return (String)value; }
  public boolean isStdout() { return type == Type.stdout; }
  public String asStdout() { if (type != Type.stdout) { throw new IllegalStateException("This RpcBodyLine is not of type stdout, it is '" + type + "'"); } return (String)value; }
  public boolean isStderr() { return type == Type.stderr; }
  public String asStderr() { if (type != Type.stderr) { throw new IllegalStateException("This RpcBodyLine is not of type stderr, it is '" + type + "'"); } return (String)value; }
  public boolean isStreamArg() { return type == Type.streamArg; }
  public String asStreamArg() { if (type != Type.streamArg) { throw new IllegalStateException("This RpcBodyLine is not of type streamArg, it is '" + type + "'"); } return (String)value; }
  public boolean isArr() { return type == Type.arr; }
  public java.util.List<RpcBodyLine> asArr() { if (type != Type.arr) { throw new IllegalStateException("This RpcBodyLine is not of type arr, it is '" + type + "'"); } return (java.util.List<RpcBodyLine>)value; }
  public boolean isNode() { return type == Type.node; }
  public NodeLocator asNode() { if (type != Type.node) { throw new IllegalStateException("This RpcBodyLine is not of type node, it is '" + type + "'"); } return (NodeLocator)value; }
  public boolean isDotGraph() { return type == Type.dotGraph; }
  public String asDotGraph() { if (type != Type.dotGraph) { throw new IllegalStateException("This RpcBodyLine is not of type dotGraph, it is '" + type + "'"); } return (String)value; }
  public boolean isHighlightMsg() { return type == Type.highlightMsg; }
  public HighlightableMessage asHighlightMsg() { if (type != Type.highlightMsg) { throw new IllegalStateException("This RpcBodyLine is not of type highlightMsg, it is '" + type + "'"); } return (HighlightableMessage)value; }
  public boolean isTracing() { return type == Type.tracing; }
  public Tracing asTracing() { if (type != Type.tracing) { throw new IllegalStateException("This RpcBodyLine is not of type tracing, it is '" + type + "'"); } return (Tracing)value; }
  public boolean isHtml() { return type == Type.html; }
  public String asHtml() { if (type != Type.html) { throw new IllegalStateException("This RpcBodyLine is not of type html, it is '" + type + "'"); } return (String)value; }

  public static RpcBodyLine fromJSON(JSONObject obj) {
    final Type type;
    try { type = Type.valueOf(obj.getString("type")); }
    catch (IllegalArgumentException e) { throw new org.json.JSONException(e); }
    switch (type) {
    case plain:
      try {
        final String val = obj.getString("value");
        return fromPlain(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case stdout:
      try {
        final String val = obj.getString("value");
        return fromStdout(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case stderr:
      try {
        final String val = obj.getString("value");
        return fromStderr(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case streamArg:
      try {
        final String val = obj.getString("value");
        return fromStreamArg(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case arr:
      try {
        final java.util.List<RpcBodyLine> val = codeprober.util.JsonUtil.<RpcBodyLine>mapArr(obj.getJSONArray("value"), (arr, idx) -> RpcBodyLine.fromJSON(arr.getJSONObject(idx)));
        return fromArr(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case node:
      try {
        final NodeLocator val = NodeLocator.fromJSON(obj.getJSONObject("value"));
        return fromNode(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case dotGraph:
      try {
        final String val = obj.getString("value");
        return fromDotGraph(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case highlightMsg:
      try {
        final HighlightableMessage val = HighlightableMessage.fromJSON(obj.getJSONObject("value"));
        return fromHighlightMsg(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case tracing:
      try {
        final Tracing val = Tracing.fromJSON(obj.getJSONObject("value"));
        return fromTracing(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    case html:
    default:
      try {
        final String val = obj.getString("value");
        return fromHtml(val);
      } catch (org.json.JSONException e) {
        throw new org.json.JSONException("Not a valid RpcBodyLine", e);
      }
    }
  }

  public JSONObject toJSON() {
    final JSONObject ret = new JSONObject().put("type", type.name());
    switch (type) {
    case plain:
      ret.put("value", ((String)value));
      break;
    case stdout:
      ret.put("value", ((String)value));
      break;
    case stderr:
      ret.put("value", ((String)value));
      break;
    case streamArg:
      ret.put("value", ((String)value));
      break;
    case arr:
      ret.put("value", new org.json.JSONArray(((java.util.List<RpcBodyLine>)value).stream().<Object>map(x->x.toJSON()).collect(java.util.stream.Collectors.toList())));
      break;
    case node:
      ret.put("value", ((NodeLocator)value).toJSON());
      break;
    case dotGraph:
      ret.put("value", ((String)value));
      break;
    case highlightMsg:
      ret.put("value", ((HighlightableMessage)value).toJSON());
      break;
    case tracing:
      ret.put("value", ((Tracing)value).toJSON());
      break;
    case html:
    default:
      ret.put("value", ((String)value));
      break;
    }
    return ret;
  }
}
